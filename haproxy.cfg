global
    log stdout format raw daemon "${LOG_LEVEL}"
    maxconn 4000

defaults
    mode http
    log global
    option httplog
    option dontlognull
    option http-server-close
    option redispatch
    retries 3
    timeout http-request 10s
    timeout queue 1m
    timeout connect 10s
    timeout client 10m
    timeout server 10m
    timeout http-keep-alive 10s
    timeout check 10s
    maxconn 3000

    # Allow seamless reloads
    load-server-state-from-file global

    # Use provided example error pages
    errorfile 400 /usr/local/etc/haproxy/errors/400.http
    errorfile 403 /usr/local/etc/haproxy/errors/403.http
    errorfile 408 /usr/local/etc/haproxy/errors/408.http
    errorfile 500 /usr/local/etc/haproxy/errors/500.http
    errorfile 502 /usr/local/etc/haproxy/errors/502.http
    errorfile 503 /usr/local/etc/haproxy/errors/503.http
    errorfile 504 /usr/local/etc/haproxy/errors/504.http

backend dockerbackend
    server dockersocket /var/run/docker.sock

frontend dockerfrontend
    bind :2375

    http-request allow if METH_HEAD { path,url_dec -m reg -i ^(/v[\d\.]+)?/_ping } { env(HEAD_PING) -m bool }

    http-request allow if METH_GET { path,url_dec -m reg -i ^(/v[\d\.]+)?/_ping } { env(GET_PING) -m bool }
    http-request allow if METH_GET { path,url_dec -m reg -i ^(/v[\d\.]+)?/auth } { env(GET_AUTH) -m bool }
    http-request allow if METH_GET { path,url_dec -m reg -i ^(/v[\d\.]+)?/build } { env(GET_BUILD) -m bool }
    http-request allow if METH_GET { path,url_dec -m reg -i ^(/v[\d\.]+)?/commit } { env(GET_COMMIT) -m bool }
    http-request allow if METH_GET { path,url_dec -m reg -i ^(/v[\d\.]+)?/configs } { env(GET_CONFIGS) -m bool }
    http-request allow if METH_GET { path,url_dec -m reg -i ^(/v[\d\.]+)?/containers } { env(GET_CONTAINERS) -m bool }
    http-request allow if METH_GET { path,url_dec -m reg -i ^(/v[\d\.]+)?/distribution } { env(GET_DISTRIBUTION) -m bool }
    http-request allow if METH_GET { path,url_dec -m reg -i ^(/v[\d\.]+)?/events } { env(GET_EVENTS) -m bool }
    http-request allow if METH_GET { path,url_dec -m reg -i ^(/v[\d\.]+)?/exec } { env(GET_EXEC) -m bool }
    http-request allow if METH_GET { path,url_dec -m reg -i ^(/v[\d\.]+)?/images } { env(GET_IMAGES) -m bool }
    http-request allow if METH_GET { path,url_dec -m reg -i ^(/v[\d\.]+)?/info } { env(GET_INFO) -m bool }
    http-request allow if METH_GET { path,url_dec -m reg -i ^(/v[\d\.]+)?/networks } { env(GET_NETWORKS) -m bool }
    http-request allow if METH_GET { path,url_dec -m reg -i ^(/v[\d\.]+)?/nodes } { env(GET_NODES) -m bool }
    http-request allow if METH_GET { path,url_dec -m reg -i ^(/v[\d\.]+)?/plugins } { env(GET_PLUGINS) -m bool }
    http-request allow if METH_GET { path,url_dec -m reg -i ^(/v[\d\.]+)?/post } { env(GET_POST) -m bool }
    http-request allow if METH_GET { path,url_dec -m reg -i ^(/v[\d\.]+)?/secrets } { env(GET_SECRETS) -m bool }
    http-request allow if METH_GET { path,url_dec -m reg -i ^(/v[\d\.]+)?/services } { env(GET_SERVICES) -m bool }
    http-request allow if METH_GET { path,url_dec -m reg -i ^(/v[\d\.]+)?/session } { env(GET_SESSION) -m bool }
    http-request allow if METH_GET { path,url_dec -m reg -i ^(/v[\d\.]+)?/swarm } { env(GET_SWARM) -m bool }
    http-request allow if METH_GET { path,url_dec -m reg -i ^(/v[\d\.]+)?/system } { env(GET_SYSTEM) -m bool }
    http-request allow if METH_GET { path,url_dec -m reg -i ^(/v[\d\.]+)?/tasks } { env(GET_TASKS) -m bool }
    http-request allow if METH_GET { path,url_dec -m reg -i ^(/v[\d\.]+)?/version } { env(GET_VERSION) -m bool }
    http-request allow if METH_GET { path,url_dec -m reg -i ^(/v[\d\.]+)?/volumes } { env(GET_VOLUMES) -m bool }

    http-request allow if METH_POST { env(POST_ALL) -m bool }
    http-request allow if METH_POST { path,url_dec -m reg -i ^(/v[\d\.]+)?/containers/create } { env(POST_CONTAINERS_CREATE) -m bool }
    http-request allow if METH_POST { path,url_dec -m reg -i ^(/v[\d\.]+)?/containers/prune } { env(POST_CONTAINERS_PRUNE) -m bool }
    http-request allow if METH_POST { path,url_dec -m reg -i ^(/v[\d\.]+)?/containers/[a-zA-Z0-9_.-]+/start } { env(POST_CONTAINERS_START) -m bool }
    http-request allow if METH_POST { path,url_dec -m reg -i ^(/v[\d\.]+)?/containers/[a-zA-Z0-9_.-]+/stop } { env(POST_CONTAINERS_STOP) -m bool }
    http-request allow if METH_POST { path,url_dec -m reg -i ^(/v[\d\.]+)?/containers/[a-zA-Z0-9_.-]+/restart } { env(POST_CONTAINERS_RESTART) -m bool }
    http-request allow if METH_POST { path,url_dec -m reg -i ^(/v[\d\.]+)?/containers/[a-zA-Z0-9_.-]+/kill } { env(POST_CONTAINERS_KILL) -m bool }
    http-request allow if METH_POST { path,url_dec -m reg -i ^(/v[\d\.]+)?/containers/[a-zA-Z0-9_.-]+/resize } { env(POST_CONTAINERS_RESIZE) -m bool }
    http-request allow if METH_POST { path,url_dec -m reg -i ^(/v[\d\.]+)?/containers/[a-zA-Z0-9_.-]+/update } { env(POST_CONTAINERS_UPDATE) -m bool }
    http-request allow if METH_POST { path,url_dec -m reg -i ^(/v[\d\.]+)?/containers/[a-zA-Z0-9_.-]+/rename } { env(POST_CONTAINERS_RENAME) -m bool }
    http-request allow if METH_POST { path,url_dec -m reg -i ^(/v[\d\.]+)?/containers/[a-zA-Z0-9_.-]+/pause } { env(POST_CONTAINERS_PAUSE) -m bool }
    http-request allow if METH_POST { path,url_dec -m reg -i ^(/v[\d\.]+)?/containers/[a-zA-Z0-9_.-]+/unpause } { env(POST_CONTAINERS_UNPAUSE) -m bool }
    http-request allow if METH_POST { path,url_dec -m reg -i ^(/v[\d\.]+)?/containers/[a-zA-Z0-9_.-]+/attach } { env(POST_CONTAINERS_ATTACH) -m bool }
    http-request allow if METH_POST { path,url_dec -m reg -i ^(/v[\d\.]+)?/containers/[a-zA-Z0-9_.-]+/wait } { env(POST_CONTAINERS_WAIT) -m bool }
    http-request allow if METH_POST { path,url_dec -m reg -i ^(/v[\d\.]+)?/containers/[a-zA-Z0-9_.-]+/exec } { env(POST_CONTAINERS_EXEC) -m bool }
    http-request allow if METH_POST { path,url_dec -m reg -i ^(/v[\d\.]+)?/volumes/create } { env(POST_VOLUMES_CREATE) -m bool }
    http-request allow if METH_POST { path,url_dec -m reg -i ^(/v[\d\.]+)?/volumes/prune } { env(POST_VOLUMES_PRUNE) -m bool }
    http-request allow if METH_POST { path,url_dec -m reg -i ^(/v[\d\.]+)?/networks/create } { env(POST_NETWORKS_CREATE) -m bool }
    http-request allow if METH_POST { path,url_dec -m reg -i ^(/v[\d\.]+)?/networks/prune } { env(POST_NETWORKS_PRUNE) -m bool }
    http-request allow if METH_POST { path,url_dec -m reg -i ^(/v[\d\.]+)?/images/create } { env(POST_IMAGES_CREATE) -m bool }
    http-request allow if METH_POST { path,url_dec -m reg -i ^(/v[\d\.]+)?/images/prune } { env(POST_IMAGES_PRUNE) -m bool }
    http-request allow if METH_POST { path,url_dec -m reg -i ^(/v[\d\.]+)?/networks/[a-zA-Z0-9_.-]+/connect } { env(POST_NETWORKS_CONNECT) -m bool }
    http-request allow if METH_POST { path,url_dec -m reg -i ^(/v[\d\.]+)?/networks/[a-zA-Z0-9_.-]+/disconnect } { env(POST_NETWORKS_DISCONNECT) -m bool }

    # DELETE requests
    http-request allow if METH_DELETE { env(DELETE_ALL) -m bool }
    http-request allow if METH_DELETE { path,url_dec -m reg -i ^(/v[\d\.]+)?/networks/[a-zA-Z0-9_.-]+ } { env(DELETE_NETWORKS) -m bool }
    http-request allow if METH_DELETE { path,url_dec -m reg -i ^(/v[\d\.]+)?/containers/[a-zA-Z0-9_.-]+ } { env(DELETE_CONTAINERS) -m bool }
    http-request allow if METH_DELETE { path,url_dec -m reg -i ^(/v[\d\.]+)?/images/[a-zA-Z0-9_.-]+ } { env(DELETE_IMAGES) -m bool }
    http-request allow if METH_DELETE { path,url_dec -m reg -i ^(/v[\d\.]+)?/volumes/[a-zA-Z0-9_.-]+ } { env(DELETE_VOLUMES) -m bool }

    http-request deny
    default_backend dockerbackend
